// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: chat_queries.sql

package database

import (
	"context"

	"github.com/google/uuid"
)

const addUserToChat = `-- name: AddUserToChat :exec
INSERT INTO ChatsToUsers (chat_id, user_id) VALUES ($1, $2)
`

type AddUserToChatParams struct {
	ChatID uuid.UUID
	UserID uuid.UUID
}

func (q *Queries) AddUserToChat(ctx context.Context, arg AddUserToChatParams) error {
	_, err := q.db.Exec(ctx, addUserToChat, arg.ChatID, arg.UserID)
	return err
}

const createChat = `-- name: CreateChat :one
INSERT INTO Chats (chat_id, chatname)
VALUES ($1, $2)
RETURNING chat_id, chatname
`

type CreateChatParams struct {
	ChatID   uuid.UUID
	Chatname string
}

func (q *Queries) CreateChat(ctx context.Context, arg CreateChatParams) (Chat, error) {
	row := q.db.QueryRow(ctx, createChat, arg.ChatID, arg.Chatname)
	var i Chat
	err := row.Scan(&i.ChatID, &i.Chatname)
	return i, err
}

const deleteChat = `-- name: DeleteChat :exec
DELETE FROM Chats WHERE Chats.chat_id = $1
`

func (q *Queries) DeleteChat(ctx context.Context, chatID uuid.UUID) error {
	_, err := q.db.Exec(ctx, deleteChat, chatID)
	return err
}

const deleteUserFromChat = `-- name: DeleteUserFromChat :exec
DELETE FROM ChatsToUsers WHERE ChatsToUsers.chat_id = $1 AND ChatsToUsers.user_id = $2
`

type DeleteUserFromChatParams struct {
	ChatID uuid.UUID
	UserID uuid.UUID
}

func (q *Queries) DeleteUserFromChat(ctx context.Context, arg DeleteUserFromChatParams) error {
	_, err := q.db.Exec(ctx, deleteUserFromChat, arg.ChatID, arg.UserID)
	return err
}

const getChatByChatID = `-- name: GetChatByChatID :one
SELECT chat_id, chatname FROM Chats WHERE Chats.chat_id = $1
`

func (q *Queries) GetChatByChatID(ctx context.Context, chatID uuid.UUID) (Chat, error) {
	row := q.db.QueryRow(ctx, getChatByChatID, chatID)
	var i Chat
	err := row.Scan(&i.ChatID, &i.Chatname)
	return i, err
}

const getChatsOfUser = `-- name: GetChatsOfUser :many
SELECT Chats.chat_id FROM Chats 
JOIN ChatsToUsers ON Chats.chat_id = ChatsToUsers.chat_id
WHERE ChatsToUsers.user_id = $1
`

func (q *Queries) GetChatsOfUser(ctx context.Context, userID uuid.UUID) ([]uuid.UUID, error) {
	rows, err := q.db.Query(ctx, getChatsOfUser, userID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []uuid.UUID
	for rows.Next() {
		var chat_id uuid.UUID
		if err := rows.Scan(&chat_id); err != nil {
			return nil, err
		}
		items = append(items, chat_id)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getUsersFromChat = `-- name: GetUsersFromChat :many
SELECT Users.user_id FROM Users 
JOIN ChatsToUsers ON Users.user_id = ChatsToUsers.user_id
WHERE ChatsToUsers.chat_id = $1
`

func (q *Queries) GetUsersFromChat(ctx context.Context, chatID uuid.UUID) ([]uuid.UUID, error) {
	rows, err := q.db.Query(ctx, getUsersFromChat, chatID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []uuid.UUID
	for rows.Next() {
		var user_id uuid.UUID
		if err := rows.Scan(&user_id); err != nil {
			return nil, err
		}
		items = append(items, user_id)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
