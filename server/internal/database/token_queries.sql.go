// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: token_queries.sql

package database

import (
	"context"

	"github.com/google/uuid"
	"github.com/jackc/pgx/v5/pgtype"
)

const getTokenOfUser = `-- name: GetTokenOfUser :one
SELECT user_id, token, expires_at FROM Tokens WHERE user_id = $1
`

func (q *Queries) GetTokenOfUser(ctx context.Context, userID uuid.UUID) (Token, error) {
	row := q.db.QueryRow(ctx, getTokenOfUser, userID)
	var i Token
	err := row.Scan(&i.UserID, &i.Token, &i.ExpiresAt)
	return i, err
}

const setTokenForUser = `-- name: SetTokenForUser :one
INSERT INTO Tokens (user_id, token, expires_at) 
VALUES ($1, $2, $3) 
ON CONFLICT (user_id) 
DO UPDATE SET token = $2 AND expires_at = $3
RETURNING user_id, token, expires_at
`

type SetTokenForUserParams struct {
	UserID    uuid.UUID
	Token     string
	ExpiresAt pgtype.Timestamp
}

func (q *Queries) SetTokenForUser(ctx context.Context, arg SetTokenForUserParams) (Token, error) {
	row := q.db.QueryRow(ctx, setTokenForUser, arg.UserID, arg.Token, arg.ExpiresAt)
	var i Token
	err := row.Scan(&i.UserID, &i.Token, &i.ExpiresAt)
	return i, err
}
