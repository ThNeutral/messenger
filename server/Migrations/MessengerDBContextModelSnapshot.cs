// <auto-generated />
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;
using server.internals.dbMigrations;

#nullable disable

namespace server.Migrations
{
    [DbContext(typeof(MessengerDBContext))]
    partial class MessengerDBContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.8")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("server.internals.dbMigrations.tables.Chat", b =>
                {
                    b.Property<decimal>("ChatID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("numeric(20,0)");

                    b.Property<string>("ChatName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.HasKey("ChatID");

                    b.ToTable("Chats");
                });

            modelBuilder.Entity("server.internals.dbMigrations.tables.ChatToUser", b =>
                {
                    b.Property<decimal>("ChatID")
                        .HasColumnType("numeric(20,0)");

                    b.Property<decimal>("UserID")
                        .HasColumnType("numeric(20,0)");

                    b.HasKey("ChatID", "UserID");

                    b.HasIndex("UserID");

                    b.ToTable("ChatToUsers");
                });

            modelBuilder.Entity("server.internals.dbMigrations.tables.Message", b =>
                {
                    b.Property<decimal>("MessageID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("numeric(20,0)");

                    b.Property<decimal>("ChatID")
                        .HasColumnType("numeric(20,0)");

                    b.Property<string>("Content")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<bool>("IsRedirect")
                        .HasColumnType("boolean");

                    b.Property<long>("SendTime")
                        .HasColumnType("BigInt");

                    b.Property<decimal>("UserID")
                        .HasColumnType("numeric(20,0)");

                    b.HasKey("MessageID");

                    b.HasIndex("ChatID");

                    b.HasIndex("UserID");

                    b.ToTable("Messages");
                });

            modelBuilder.Entity("server.internals.dbMigrations.tables.ProfilePicture", b =>
                {
                    b.Property<decimal>("UserID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("numeric(20,0)");

                    b.Property<string>("Base64EncodedImage")
                        .IsRequired()
                        .HasColumnType("Text");

                    b.HasKey("UserID");

                    b.ToTable("ProfilePictures");
                });

            modelBuilder.Entity("server.internals.dbMigrations.tables.Token", b =>
                {
                    b.Property<decimal>("UserID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("numeric(20,0)");

                    b.Property<long>("ExpiresAt")
                        .HasColumnType("BigInt");

                    b.Property<string>("JWToken")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.HasKey("UserID");

                    b.ToTable("Tokens");
                });

            modelBuilder.Entity("server.internals.dbMigrations.tables.User", b =>
                {
                    b.Property<decimal>("UserID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("numeric(20,0)");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.Property<string>("Salt")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.Property<int>("UserStatus")
                        .HasMaxLength(50)
                        .HasColumnType("integer");

                    b.Property<string>("Username")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.HasKey("UserID");

                    b.HasIndex("Email")
                        .IsUnique();

                    b.HasIndex("Username")
                        .IsUnique();

                    b.ToTable("Users");
                });

            modelBuilder.Entity("server.internals.dbMigrations.tables.WatchedBy", b =>
                {
                    b.Property<decimal>("MessageID")
                        .HasColumnType("numeric(20,0)");

                    b.Property<decimal>("UserID")
                        .HasColumnType("numeric(20,0)");

                    b.HasKey("MessageID", "UserID");

                    b.HasIndex("UserID");

                    b.ToTable("WatchedBy");
                });

            modelBuilder.Entity("server.internals.dbMigrations.tables.ChatToUser", b =>
                {
                    b.HasOne("server.internals.dbMigrations.tables.Chat", "Chat")
                        .WithMany("ChatsToUsers")
                        .HasForeignKey("ChatID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("server.internals.dbMigrations.tables.User", "User")
                        .WithMany("ChatsToUsers")
                        .HasForeignKey("UserID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Chat");

                    b.Navigation("User");
                });

            modelBuilder.Entity("server.internals.dbMigrations.tables.Message", b =>
                {
                    b.HasOne("server.internals.dbMigrations.tables.Chat", "Chat")
                        .WithMany("Messages")
                        .HasForeignKey("ChatID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("server.internals.dbMigrations.tables.User", "User")
                        .WithMany("Messages")
                        .HasForeignKey("UserID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Chat");

                    b.Navigation("User");
                });

            modelBuilder.Entity("server.internals.dbMigrations.tables.ProfilePicture", b =>
                {
                    b.HasOne("server.internals.dbMigrations.tables.User", "User")
                        .WithOne("ProfilePicture")
                        .HasForeignKey("server.internals.dbMigrations.tables.ProfilePicture", "UserID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("server.internals.dbMigrations.tables.Token", b =>
                {
                    b.HasOne("server.internals.dbMigrations.tables.User", "User")
                        .WithOne("Token")
                        .HasForeignKey("server.internals.dbMigrations.tables.Token", "UserID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("server.internals.dbMigrations.tables.WatchedBy", b =>
                {
                    b.HasOne("server.internals.dbMigrations.tables.Message", "Message")
                        .WithMany("WatchedBies")
                        .HasForeignKey("MessageID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("server.internals.dbMigrations.tables.User", "User")
                        .WithMany("WatchedBies")
                        .HasForeignKey("UserID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Message");

                    b.Navigation("User");
                });

            modelBuilder.Entity("server.internals.dbMigrations.tables.Chat", b =>
                {
                    b.Navigation("ChatsToUsers");

                    b.Navigation("Messages");
                });

            modelBuilder.Entity("server.internals.dbMigrations.tables.Message", b =>
                {
                    b.Navigation("WatchedBies");
                });

            modelBuilder.Entity("server.internals.dbMigrations.tables.User", b =>
                {
                    b.Navigation("ChatsToUsers");

                    b.Navigation("Messages");

                    b.Navigation("ProfilePicture")
                        .IsRequired();

                    b.Navigation("Token")
                        .IsRequired();

                    b.Navigation("WatchedBies");
                });
#pragma warning restore 612, 618
        }
    }
}
